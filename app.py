from PIL import ImageTk, Image
from tkinter.ttk import Entry, Combobox
from tkscrolledframe import ScrolledFrame
from tkinter import Tk, Button, Label, Frame, Toplevel, PhotoImage, Canvas, StringVar

import ia
import utils
import exercices

class ListeEntr√©es(Frame):
    def __init__(self, parent, titre_entr√©e):
        Frame.__init__(self, parent)

        self.nombre = 0
        self.entr√©es = []
        self.titre_entr√©e = titre_entr√©e

        Label(self, text='Choix de l\'exercice', font=('Arial', 18)).grid(row=0, column=0)
        Label(self, text='Quantit√©', font=('Arial', 18)).grid(row=0, column=1)

    def ajouter(self):
        self.nombre += 1
        self.entr√©es.append(Entr√©e(self, self.nombre))
    
    def extraire(self):
        new = S√©ance(self.titre_entr√©e.get(), [(entr√©e.exercice, entr√©e.valeur_quantit√©) for entr√©e in self.entr√©es])
        new.lancer_seance()            

class Entr√©e():
    def __init__(self, parent, index):
        liste_menu = exercices.TOUS

        self.index = index
        self.exercice = liste_menu[0]

        self.menu = Combobox(parent, values=liste_menu)
        self.menu.current(0)
        self.menu.bind('<<ComboboxSelected>>', self.on_select)
        self.menu.grid(row=self.index, column=0)
        
        self.label_quantit√© = Label(parent, text='secondes')
        self.label_quantit√©.grid(row=self.index, column=2)

        # On filtre pour que la valeur de la quantit√© reste un int
        self.valeur_quantit√© = 0
        def filtrer(*args):
            try:
                if quantit√©.get().strip() == '':
                    self.valeur_quantit√© = 0
                    quantit√©.set(self.valeur_quantit√©)
                else:
                    self.valeur_quantit√© = int(quantit√©.get())
            except:
                quantit√©.set(self.valeur_quantit√©)

        quantit√© = StringVar(parent, 0)
        quantit√©.trace_add('write', filtrer)
        entr√©e_quantit√© = Entry(parent, textvariable=quantit√©, width=5)
        entr√©e_quantit√©.grid(row=self.index, column=1)
    
    def on_select(self, event):
        self.exercice = self.menu.get()
        if self.exercice == exercices.PAUSE:
            self.label_quantit√©.configure(text='secondes')
        else:
            self.label_quantit√©.configure(text='r√©p√©titions')

class ResizingCanvas(Canvas):
    def __init__(self, parent, **kwargs):
        Canvas.__init__(self, parent, **kwargs)
        self.bind('<Configure>', self.on_resize)
        self.height = self.winfo_reqheight()
        self.width = self.winfo_reqwidth()

    def on_resize(self, event):
        wscale = float(event.width) / self.width
        hscale = float(event.height) / self.height
        self.width = event.width
        self.height = event.height
        self.config(width=self.width, height=self.height)
        self.scale('all', 0, 0, wscale, hscale)

def open_popup(titre):
    top = Toplevel(root)
    w = 500
    h = 200
    top.geometry(f'{w}x{h}')
    frame = Frame(top, pady=25)
    top.title('JustFit - Fin de s√©ance')
    Label(frame, text='Bravo vous venez de finir', font=('Arial 18')).pack(side='top')

    def close():
        top.destroy()
        top.update()

    label = Label(frame, text=titre,  font=('Arial 23 bold'), pady=25)
    button = Button(frame, text='FERMER', command=close)

    frame.pack(expand=True, fill='both')
    label.pack()
    button.pack(side='bottom')
    utils.center(top)

class S√©ance:
    def __init__(self, titre: str, exercices: list):
        self.titre = titre
        self.exercices = exercices

    def lancer_seance(self):
        ia.lancer(self)
        open_popup(self.titre)

def cr√©er_liste_s√©ances(object, s√©ances):

    nombre_ligne = len(s√©ances) // 3

    for i in range(nombre_ligne):
        object.grid_rowconfigure(i, weight=1)
    
    object.grid_columnconfigure(0, weight=1)
    object.grid_columnconfigure(1, weight=1)
    object.grid_columnconfigure(2, weight=1)

    for index_ligne in range(nombre_ligne + 1):
        for index_colonne in range(3):
            if len(s√©ances) == 0:
                break
            s√©ance = s√©ances.pop()

            # On construit l'affichage de l'entrainement
            cadre = Frame(object, pady=20, padx=20, borderwidth=1, relief='solid')

            cadre.config(width=100, height=100)
            cadre.grid(column=index_colonne, row=index_ligne, sticky='nswe', padx=10, pady=10)
            cadre.grid_propagate(False)
            
            titre = Label(cadre, text=s√©ance.titre, font=('Arial', 30, 'bold'))
            titre.pack()

            for exercice in s√©ance.exercices:
                contenu = Label(cadre,
                    text=f'‚Ä¢ {exercice[0]} {exercice[1]}',
                    font=('Arial', 23),
                    anchor='w',
                    justify='left',
                    wraplength=root.winfo_screenwidth() / 3 - 65
                    )
                
                if exercice[0] == exercices.PAUSE:
                    contenu['text'] += ' s'
                else:
                    contenu['text'] += ' rep'
                
                contenu.pack(fill='x')
            
            Button(cadre,
                text='Lancer cette s√©ance',
                font=('Arial', 25),
                pady=10,
                command=s√©ance.lancer_seance
                ).pack(side='bottom')

class App:
    def __init__(self, root):
        self.root = root
        self.root.title('JustFit')
    
        # On lance l'app en plein √©cran fenetr√©
        self.width = self.root.winfo_screenwidth()
        self.height = self.root.winfo_screenheight()
        self.root.geometry(f'{self.width}x{self.height}')

        # On centre la fen√™tre sur l'√©cran
        utils.center(self.root)
        
        # Couleur de fond de l'app
        self.background_color = '#0097B2'
        self.root.configure(background=self.background_color)

        # Police de l'application
        self.font = ('Roboto', 18)

    def page_de_lancement(self):
        page = Frame(self.root)

        canvas = ResizingCanvas(page, bg=self.background_color, width=self.width, height=self.height, bd=0, highlightthickness=0, relief='ridge')
        canvas.pack(expand='yes', fill='both')

        # On r√©cup√®re les coordon√©es du centre de l'√©cran    
        center_x = (canvas.winfo_reqwidth() // 2) 
        center_y = (canvas.winfo_reqheight() // 2.75) 

        # On place le logo au centre
        logo = PhotoImage(file='ressources/logo-JustFit.png', master=page)
        canvas.create_image(center_x, center_y, anchor='center', image=logo)
        self.logo = logo

        # Utilisez create_window pour placer le bouton dans le canvas
        
        button = Label(page, text='Cliquez pour commencer', cursor='hand2', font=('Arial', 25), fg='#fff', bg='#006c80', padx=10, pady=10)
        button.bind('<Button-1>', lambda x: self.transition_selection(page))

        buttonStart_window = canvas.create_window(center_x, center_y + 350, anchor='center', window=button)

        # On place le gif de l'homme
        frame_count1 = 31
        homme_frames = [PhotoImage(file='ressources/homme_muscu.gif', format='gif -index %i' % i, master=page) for i in range(frame_count1)]
        gif_label1 = canvas.create_image(center_x / 3, center_y, anchor='center', image=homme_frames[0])
        def update(ind):
            frame = homme_frames[ind]
            ind += 1
            if ind == frame_count1:
                ind = 0
            canvas.itemconfig(gif_label1, image=frame)
            canvas.tag_raise(gif_label1)
            page.after(120, update, ind)

        # On place le gif de la femme
        frame_count2 = 12
        femme_frames = [PhotoImage(file='ressources/femme_muscu.gif', format='gif -index %i' % i, master=page) for i in range(frame_count2)]
        gif_label2 = canvas.create_image(canvas.winfo_reqwidth() - (center_x / 3), center_y, anchor='center', image=femme_frames[0])
        def update2(ind):
            frame = femme_frames[ind]
            ind += 1
            if ind == frame_count2:
                ind = 0
            canvas.itemconfig(gif_label2, image=frame)
            canvas.tag_raise(gif_label2)
            page.after(180, update2, ind)


        # GIF du cercle qui tourne autour du logo
        frame_count3 = 20
        cercle_frames = [PhotoImage(file='ressources/cercle.gif', format='gif -index %i' % i, master=page) for i in range(frame_count3)]
        gif_label3 = canvas.create_image(center_x, center_y, anchor='center', image=cercle_frames[0])
        def update3(ind):
            frame3 = cercle_frames[ind]
            ind += 1
            if ind == frame_count3:
                ind = 0
            canvas.itemconfig(gif_label3, image=frame3)
            canvas.tag_raise(gif_label3) 
            page.after(100, update3, ind)

        page.after(0, update, 0)
        page.after(0, update2, 0)
        page.after(0, update3, 0)

        page.pack(expand='yes')
    
    def selection_seances(self):
        page = Frame(bg=self.background_color)
        page.pack(expand='yes', fill='both')

        # On place le titre dans une frame
        titre = Label(page, text='S√©lectionnez votre entra√Ænement', pady=20, font=('Helvetica', 25))
        titre.pack(side='top')

        Button(page, text='Cr√©er une s√©ance', command=lambda *args: self.transition_cr√©ation_s√©ance(page)).pack(side='top')

        test = [
            S√©ance('Jambe jeanne ü¶µüî•', [
                (exercices.HALTERE_GAUCHE, 5),
                (exercices.PAUSE, 10),
                (exercices.HALTERE_DROIT, 5),
                (exercices.PAUSE, 10),
                (exercices.HALTERE_DROIT, 5),
            ]),
            S√©ance('Squat', [
                (exercices.SQUAT, 10),
                (exercices.PAUSE, 20),
                (exercices.HALTERE_GAUCHE, 10)
            ]),
            S√©ance('On sait pas trop', [
                (exercices.SQUAT, 10),
                (exercices.PAUSE, 20),
                (exercices.HALTERE_GAUCHE, 10)
            ]),
            S√©ance('FENTE', [
                (exercices.FENTE_GAUCHE, 3),
                (exercices.PAUSE, 10),
                (exercices.FENTE_DROIT, 3),
                (exercices.HALTERE_GAUCHE, 10)
            ]),
            S√©ance('PAUSE', [
                (exercices.PAUSE, 5)
            ])
        ]

        # On cr√©e la Frame scrollable
        sf = ScrolledFrame(page, scrollbars='vertical')
        sf.pack(side='bottom', expand='yes', fill='both')

        # Scroll avec la roue de la souris et des fl√®ches
        sf.bind_arrow_keys(root)
        sf.bind_scroll_wheel(root)

        # Create a frame within the ScrolledFrame
        liste_s√©ance = sf.display_widget(Frame)
        cr√©er_liste_s√©ances(liste_s√©ance, test)

    def transition_selection(self, page):
        page.destroy()
        self.root.title('JustFit - S√©lection des s√©ances')
        self.selection_seances()
    
    def creation_s√©ance(self):
        page = Frame(self.root, bg=self.background_color, pady=80, padx=30)
        page.pack(expand='yes', fill='both')

        titre_entr√©e = Entry(page, font=('Arial',20), justify='center')
        titre_entr√©e.insert(0, 'Ma nouvelle s√©ance')
        titre_entr√©e.pack(side='top')

        liste = ListeEntr√©es(page, titre_entr√©e)
        
        Button(page, text='Ajouter un exercice', command=liste.ajouter).pack()

        liste.ajouter()
        liste.pack()
        
        def sauvegarder(c):
            liste.extraire()

        ajouter_au_menu = Label(page, text='Ajouter au menu', cursor='hand2', font=('Arial', 25), fg='#fff', bg='#006c80', padx=10, pady=10)
        ajouter_au_menu.bind('<Button-1>', sauvegarder)
        ajouter_au_menu.pack(side='bottom')

        page.pack(expand='yes')
    
    def transition_cr√©ation_s√©ance(self, page):
        page.destroy()
        self.root.title('JustFit - Cr√©ation d\'une s√©ance')
        self.creation_s√©ance()

        
root = Tk()
app = App(root)
app.page_de_lancement()

root.mainloop()